// This is a Declarative Jenkinsfile to be used in the homework
// It should map very well to what you learned in class.
// Implement the sections marked with "TBD:"


pipeline {
  agent {
    kubernetes {
      label "maven-skopeo-agent"
      cloud "openshift"
      inheritFrom "maven"

      // https://blog.openshift.com/decrease-maven-build-times-openshift-pipelines-using-persistent-volume-claim/
      // https://gist.github.com/jbride/1428573c36b43efe84f5611ed1d669a5
      //volumes: [
        //persistentVolumeClaim(claimName: "maven-slave-pvc", mountPath: "/home/jenkins/.m2")
      //]
      containerTemplate {
        name "jnlp"
        image "image-registry.openshift-image-registry.svc:5000/${GUID}-jenkins/jenkins-agent-appdev:latest"
        resourceRequestMemory "2Gi"
        resourceLimitMemory "2Gi"
        resourceRequestCpu "2"
        resourceLimitCpu "2"
      }
    }
  }
  environment { 
    // Define global variables
    // Set Maven command to always include Nexus Settings
    // NOTE: Somehow an inline pod template in a declarative pipeline
    //       needs the "scl_enable" before calling maven.
    def jenkinsBuildNumber = "${env.BUILD_NUMBER}"
    mvnCmd = "source /usr/local/bin/scl_enable && mvn -s ./nexus_settings.xml"

    // Images and Projects
    imageName   = "${GUID}-tasks"
    devProject  = "${GUID}-tasks-dev"
    prodProject = "${GUID}-tasks-prod"

    // Tags
    devTag      = "0.0-0"
    prodTag     = "0.0"
    
    // Blue-Green Settings
    destApp     = "tasks-green"
    activeApp   = ""

  }
  stages {

    stage('Print Vars') {
      steps {
        echo "Print Vars:  mvnCmd = ${mvnCmd} "
        echo "Print Vars:  devProject = ${devProject} "
        echo "Print Vars:  prodProject = ${prodProject} "
        echo "Print Vars:  jenkinsBuildNumber = ${jenkinsBuildNumber} "
        sh "source /usr/local/bin/scl_enable && mvn -v"
        sh "source /usr/local/bin/scl_enable && oc whoami"
      }
    }

    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        checkout scm

        dir('openshift-tasks') {
          script {
            def pom = readMavenPom file: 'pom.xml'
            def version = pom.version
            
            // Set the tag for the development image: version + build number
            devTag  = "${version}-" + currentBuild.number
            // Set the tag for the production image: version
            prodTag = "${version}"

            // Patch Source artifactId to include GUID
            sh "sed -i 's/GUID/${GUID}/g' ./pom.xml"
          }
        }
      }
    }

    // Build the Tasks Application in the directory 'openshift-tasks'
    stage('Build war') {
      steps {
        dir('openshift-tasks') {
          script {
            echo "Building version ${devTag}"

            sh "${mvnCmd} clean package -DskipTests=true"

          }
        }
      }
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        dir('openshift-tasks') {
          echo "Running Unit Tests"

          sh "${mvnCmd} test"
        }
      }
    }
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      steps {
        dir('openshift-tasks') {
          script {
            echo "Running Code Analysis"

            // TBD: Execute Sonarqube Tests
            //      Your project name should be "${GUID}-${JOB_BASE_NAME}-${devTag}"
            //      Your project version should be ${devTag}

          }
        }
      }
    }
    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      steps {
        dir('openshift-tasks') {
          echo "Publish to Nexus"

          sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://homework-nexus.gpte-hw-cicd.svc.cluster.local:8081/repository/releases"
        }
      }
    }
    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      steps {
          echo "Building OpenShift container image ${imageName}:${devTag} in project ${devProject}."
          sh "pwd"
          sh "ls -lt openshift-tasks/target"
          script {
            openshift.withCluster() {
              openshift.withProject("${devProject}") {
                openshift.selector("bc", "tasks").startBuild("--from-file=./openshift-tasks/target/openshift-tasks.war", "--wait=true")
                openshift.tag("${GUID}-tasks:latest", "${GUID}-tasks:${devTag}")
              }
            }
          }
      }
    }
    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      steps {
        dir('openshift-tasks') {
          script {
            echo "Deploying container image to Development Project"

            // TBD: Deploy to development Project
            //      Set Image, Set VERSION
            //      (Re-) Create ConfigMap
            //      Make sure the application is running and ready before proceeding

            openshift.withCluster() {
              openshift.withProject("${devProject}") {
                openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/${GUID}-tasks:${devTag}")
    
                openshift.set("env", "dc/tasks", "VERSION=\"${devTag} (tasks-dev)\"")
    
    
                // Update the Config Map which contains the users for the Tasks application
                // (just in case the properties files changed in the latest commit)
                openshift.selector('configmap', 'tasks-config').delete()
                def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )
    
                // Deploy the development application.
                openshift.selector("dc", "tasks").rollout().latest();
    
                // Wait for application to be deployed
                def dc = openshift.selector("dc", "tasks").object()
                def dc_version = dc.status.latestVersion
                def rc = openshift.selector("rc", "tasks-${dc_version}").object()
    
                echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
                while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "tasks-${dc_version}").object()
                }
              }
            }
          }
        }
      }
    }

    // Copy Image to Nexus Container Registry
    stage('Copy Image to Nexus Container Registry') {
      steps {
          echo "Copy image to Nexus Container Registry"

          sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false \
              --src-creds openshift:\$(oc whoami -t) \
              --dest-creds admin:redhat \
              docker://image-registry.openshift-image-registry.svc.cluster.local:5000/${devProject}/${GUID}-tasks:${devTag} \
              docker://homework-nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/${devProject}/${GUID}-tasks:${devTag}"


          script {
            openshift.withCluster() {
              openshift.withProject("${prodProject}") {
                openshift.tag("${devProject}/${GUID}-tasks:${devTag}", "${devProject}/${GUID}-tasks:${prodTag}")
              }
            }
          }
      }
    }

    // Blue/Green Deployment into Production
    // -------------------------------------

    stage('Blue/Green Production Deployment') {

      steps {
        script {
          echo "Blue/Green Production Deployment"

                activeApp = openshift.selector("route", "tasks").object().spec.to.name
                if (activeApp == "tasks-green") {
                  destApp = "tasks-blue"
                }
                echo "Active Application:      " + activeApp
                echo "Destination Application: " + destApp

                // Set the environment variable VERSION on the prod DCs      
                openshift.set("env", "dc/${destApp}", "VERSION=\"${prodTag} (${destApp})\"")

                // Update the Image on the Production Deployment Config
                def dc = openshift.selector("dc/${destApp}").object()
                dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/${GUID}-tasks:${prodTag}"
                openshift.apply(dc)

                // Update Config Map in change config files changed in the source
                openshift.selector("configmap", "${destApp}-config").delete()
                def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./configuration/application-users.properties", "--from-file=./configuration/application-roles.properties" )

                // Deploy the inactive application.
                openshift.selector("dc", "${destApp}").rollout().latest();

                // Wait for application to be deployed
                def dc_prod = openshift.selector("dc", "${destApp}").object()
                def dc_version = dc_prod.status.latestVersion
                def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                echo "Waiting for ${destApp} to be ready"
                while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                  sleep 5
                  rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                }
        }
      }
    }

    stage('Switch over to new Version') {
      steps{
        script {
          echo "Switching Production application to ${destApp}."
          // TBD: Execute switch
          //      Hint: sleep 5 seconds after the switch
          //            for the route to be fully switched over

          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
                def route = openshift.selector("route/tasks").object()
                route.spec.to.name="${destApp}"
                openshift.apply(route)
            }
          }

        }
      }
    }
  }
}
